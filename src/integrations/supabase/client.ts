// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = "https://nutlcbnruabjsxecqpnd.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im51dGxjYm5ydWFianN4ZWNxcG5kIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1MTcwOTgsImV4cCI6MjA3MTA5MzA5OH0.K_rfijLK9e3EbDxU4uddtY0sUMUvtH-yHNEbW8Ohp5c";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Get secure admin session token
const getAdminHeaders = () => {
  if (typeof window === 'undefined') return {};
  
  try {
    // Try secure session token first
    const sessionToken = localStorage.getItem('admin_session_token');
    if (sessionToken) {
      return {
        'x-admin-session-token': sessionToken
      };
    }
    
    // Legacy fallback - try to get email from old format
    const adminSession = localStorage.getItem('admin_session');
    if (adminSession) {
      const adminData = JSON.parse(adminSession);
      if (adminData?.email) {
        return {
          'x-admin-email': adminData.email
        };
      }
    }
  } catch (error) {
    console.error('Error getting admin headers:', error);
  }
  return {};
};

// Criar cliente Supabase
const supabaseClient = createClient<any>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: typeof window !== 'undefined' ? localStorage : undefined,
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    headers: getAdminHeaders()
  }
});

// Fun√ß√£o para criar uma inst√¢ncia com headers atualizados
const createSupabaseWithUpdatedHeaders = () => {
  return createClient<any>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
    auth: {
      storage: typeof window !== 'undefined' ? localStorage : undefined,
      persistSession: true,
      autoRefreshToken: true,
    },
    global: {
      headers: getAdminHeaders()
    }
  });
};

// Proxy para interceptar opera√ß√µes cr√≠ticas e garantir headers atualizados
export const supabase = new Proxy(supabaseClient, {
  get(target, prop) {
    // Para opera√ß√µes RPC (que usam headers), criar nova inst√¢ncia com headers atualizados
    if (prop === 'rpc') {
      const freshClient = createSupabaseWithUpdatedHeaders();
      console.log('üîÑ Criando RPC com headers atualizados:', getAdminHeaders());
      return freshClient.rpc.bind(freshClient);
    }
    
    // Para outras opera√ß√µes, usar cliente original
    const value = target[prop as keyof typeof target];
    return typeof value === 'function' ? value.bind(target) : value;
  }
});